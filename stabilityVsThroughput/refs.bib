@misc{bcExperience,
    author = {{Author Anonymous for Review}},
    howpublished = {Personal Experience},
    date = {2022},
    organization = {Blockchain.com},

}

@inproceedings{sparkPaper,
    author = {Matei Zaharia and Mosharaf Chowdhury and Tathagata Das and Ankur Dave and Justin Ma and Murphy McCauly and Michael J. Franklin and Scott Shenker and Ion Stoica},
    title = {Resilient Distributed Datasets: A {Fault-Tolerant} Abstraction for {In-Memory} Cluster Computing},
    booktitle = {9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12)},
    year = {2012},
    isbn = {978-931971-92-8},
    address = {San Jose, CA},
    pages = {15--28},
    url = {https://www.usenix.org/conference/nsdi12/technical-sessions/presentation/zaharia},
    publisher = {USENIX Association},
    month = apr,
}

@article{10.1145/1323293.1294281,
    author = {DeCandia, Giuseppe and Hastorun, Deniz and Jampani, Madan and Kakulapati, Gunavardhan and Lakshman, Avinash and Pilchin, Alex and Sivasubramanian, Swaminathan and Vosshall, Peter and Vogels, Werner},
    title = {Dynamo: Amazon's Highly Available Key-Value Store},
    year = {2007},
    issue_date = {December 2007},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {41},
    number = {6},
    issn = {0163-5980},
    url = {https://doi.org/10.1145/1323293.1294281},
    doi = {10.1145/1323293.1294281},
    abstract = {Reliability at massive scale is one of the biggest challenges we face at Amazon.com, one of the largest e-commerce operations in the world; even the slightest outage has significant financial consequences and impacts customer trust. The Amazon.com platform, which provides services for many web sites worldwide, is implemented on top of an infrastructure of tens of thousands of servers and network components located in many datacenters around the world. At this scale, small and large components fail continuously and the way persistent state is managed in the face of these failures drives the reliability and scalability of the software systems.This paper presents the design and implementation of Dynamo, a highly available key-value storage system that some of Amazon's core services use to provide an "always-on" experience. To achieve this level of availability, Dynamo sacrifices consistency under certain failure scenarios. It makes extensive use of object versioning and application-assisted conflict resolution in a manner that provides a novel interface for developers to use.},
    journal = {SIGOPS Oper. Syst. Rev.},
    month = {oct},
    pages = {205–220},
    numpages = {16},
    keywords = {scalability, performance, reliability}
}


@inproceedings{amazonDynamoDb,
    author = {DeCandia, Giuseppe and Hastorun, Deniz and Jampani, Madan and Kakulapati, Gunavardhan and Lakshman, Avinash and Pilchin, Alex and Sivasubramanian, Swaminathan and Vosshall, Peter and Vogels, Werner},
    title = {Dynamo: Amazon's Highly Available Key-Value Store},
    year = {2007},
    isbn = {9781595935915},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1294261.1294281},
    doi = {10.1145/1294261.1294281},
    abstract = {Reliability at massive scale is one of the biggest challenges we face at Amazon.com, one of the largest e-commerce operations in the world; even the slightest outage has significant financial consequences and impacts customer trust. The Amazon.com platform, which provides services for many web sites worldwide, is implemented on top of an infrastructure of tens of thousands of servers and network components located in many datacenters around the world. At this scale, small and large components fail continuously and the way persistent state is managed in the face of these failures drives the reliability and scalability of the software systems.This paper presents the design and implementation of Dynamo, a highly available key-value storage system that some of Amazon's core services use to provide an "always-on" experience. To achieve this level of availability, Dynamo sacrifices consistency under certain failure scenarios. It makes extensive use of object versioning and application-assisted conflict resolution in a manner that provides a novel interface for developers to use.},
    booktitle = {Proceedings of Twenty-First ACM SIGOPS Symposium on Operating Systems Principles},
    pages = {205–220},
    numpages = {16},
    keywords = {performance, reliability, scalability},
    location = {Stevenson, Washington, USA},
    series = {SOSP '07},
    urldate = {2022-02-25},
}

@article{corbett2013spanner,
    title = {Spanner: Google’s globally distributed database},
    author = {Corbett, James C and Dean, Jeffrey and Epstein, Michael and Fikes, Andrew and Frost, Christopher and Furman, Jeffrey John and Ghemawat, Sanjay and Gubarev, Andrey and Heiser, Christopher and Hochschild, Peter and others},
    journal = {ACM Transactions on Computer Systems (TOCS)},
    volume = {31},
    number = {3},
    pages = {1--22},
    year = {2013},
    publisher = {ACM New York, NY, USA},
    url = {https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf},
    urldate = {2022-02-25},
}

@article{van2015paxos,
    title = {Paxos made moderately complex},
    author = {Van Renesse, Robbert and Altinbuken, Deniz},
    journal = {ACM Computing Surveys (CSUR)},
    volume = {47},
    number = {3},
    pages = {1--36},
    year = {2015},
    publisher = {ACM New York, NY, USA},
    doi = {10.1145/2673577},
}
